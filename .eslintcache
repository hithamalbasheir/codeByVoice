[{"/home/hitham/Downloads/react-voice-main/src/index.js":"1","/home/hitham/Downloads/react-voice-main/src/serviceWorker.js":"2","/home/hitham/Downloads/react-voice-main/src/App.js":"3","/home/hitham/Downloads/react-voice-main/src/storage.js":"4","/home/hitham/Downloads/react-voice-main/src/config.js":"5","/home/hitham/Downloads/react-voice-main/src/scripts/commands.js":"6","/home/hitham/Downloads/react-voice-main/src/scripts/mappings.js":"7","/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/index.js":"8","/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/App.js":"9","/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/serviceWorker.js":"10","/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/config.js":"11","/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/storage.js":"12","/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/scripts/commands.js":"13","/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/scripts/mappings.js":"14"},{"size":481,"mtime":1610235587634,"results":"15","hashOfConfig":"16"},{"size":5086,"mtime":1600030803000,"results":"17","hashOfConfig":"16"},{"size":6772,"mtime":1610313315753,"results":"18","hashOfConfig":"16"},{"size":405,"mtime":1600030803000,"results":"19","hashOfConfig":"16"},{"size":711,"mtime":1610235747154,"results":"20","hashOfConfig":"16"},{"size":8539,"mtime":1610235738778,"results":"21","hashOfConfig":"16"},{"size":8771,"mtime":1610235750942,"results":"22","hashOfConfig":"16"},{"size":481,"mtime":1610235587634,"results":"23","hashOfConfig":"24"},{"size":6772,"mtime":1610313315753,"results":"25","hashOfConfig":"24"},{"size":5086,"mtime":1600030803000,"results":"26","hashOfConfig":"24"},{"size":711,"mtime":1610235747154,"results":"27","hashOfConfig":"24"},{"size":405,"mtime":1600030803000,"results":"28","hashOfConfig":"24"},{"size":12137,"mtime":1612702034848,"results":"29","hashOfConfig":"24"},{"size":9866,"mtime":1612703920488,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"29u9h9",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"hzp02a",{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"48"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/hitham/Downloads/react-voice-main/src/index.js",[],"/home/hitham/Downloads/react-voice-main/src/serviceWorker.js",[],["63","64"],"/home/hitham/Downloads/react-voice-main/src/App.js",["65"],"/home/hitham/Downloads/react-voice-main/src/storage.js",[],"/home/hitham/Downloads/react-voice-main/src/config.js",[],"/home/hitham/Downloads/react-voice-main/src/scripts/commands.js",["66"],"/home/hitham/Downloads/react-voice-main/src/scripts/mappings.js",[],"/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/index.js",[],["67","68"],"/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/App.js",["69"],"import React, { useState, useEffect } from 'react';\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport cn from 'classnames';\nimport moment from 'moment-mini';\nimport Modal from 'react-bootstrap4-modal';\nimport getCommands from './scripts/commands';\nimport { config } from './config';\nimport { getStorage, setStorage } from './storage';\nimport 'bootstrap';\nimport './styles/icono.css';\nimport './styles/App.scss';\n\nfunction App() {\n  const [spokenList, setSpokenList] = useState([]);\n  const [modalText, setModalText] = useState('');\n  const [modalTitle, setModalTitle] = useState('');\n  const [modalVisible, setModalVisible] = useState(false);\n\n  const [language, setLanguage] = useState(config.defaultLanguage);\n  const commands = getCommands(addToList, language, endFunction);\n\n  const {\n    interimTranscript,\n    finalTranscript,\n    resetTranscript,\n    listening,\n  } = useSpeechRecognition({ commands });\n\n  // only runs on initial startup\n  useEffect(() => {\n    if (config.listenOnStartup) {\n      SpeechRecognition.startListening({\n        continuous: true,\n        matchInterim: false,\n        language: language.locale\n      });\n    }\n  }, []);\n\n  if (finalTranscript === 'stop' || finalTranscript === 'stop listening') {\n    stopMic();\n  } else if (finalTranscript === 'reset') {\n    reset();\n  }\n\n  function addToList(text) {\n    const newList = spokenList;\n    newList.push({ text, time: moment().format('HH:mm:ss') });\n    setSpokenList(newList);\n  }\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return (\n      <div>\n        <h2>Web Speech API is not supported in this browser</h2>\n\n        <span className=\"text-info\">Suppoted desktop browsers: </span>\n        <p>Chrome and Edge</p>\n\n        <span className=\"text-info\">Suppoted mobile browsers: </span>\n        <p>Android WebView, Chrome for Android, and Samsung Internet</p>\n      </div>\n    );\n  }\n\n  function startMic() {\n    SpeechRecognition.startListening({\n      continuous: true,\n      matchInterim: false,\n      language: language.locale\n    });\n  }\n\n  function stopMic() {\n    SpeechRecognition.stopListening();\n  }\n\n  function reset() {\n    resetTranscript();\n    setSpokenList([]);\n  }\n\n  function endFunction() {\n    resetTranscript();\n  }\n\n  function changeTheme(theme) {\n    if (getStorage('theme') !== theme) {\n      setStorage('theme', theme);\n      window.location.reload();\n    }\n  }\n\n  function getSpokenList() {\n    const list = [];\n\n    for (let i = spokenList.length - 1; i >= 0; i--) {\n      list.push(\n        <div className=\"alert alert-info spoken-item\" key={i}>\n          <p className=\"text spoken-time\">{spokenList[i].time}</p>\n          <p className=\"text spoken-text\">{spokenList[i].text}</p>\n        </div>\n      )\n    }\n\n    return list;\n  }\n\n  function getCommandsList() {\n    let count = 0;\n    return commands.map(command => {\n      if (command.description) {\n        return (\n          <tr\n            key={count++}\n            className=\"commands-row\"\n            data-toggle=\"modal\"\n            data-target=\"#commandModal\"\n            onClick={() => {\n              setModalText(command.commandText);\n              setModalTitle(command.description);\n              setModalVisible(true);\n            }}\n          >\n            <td>{command.description}</td>\n            <td>{command.command}</td>\n          </tr>\n        );\n      }\n\n      return null;\n    });\n  }\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row action-row center\">\n        <div className=\"col-md-4\">\n          <div className={cn('card action-card', { 'border-primary': !listening, 'border-success': listening })} onClick={startMic}>\n            <p className=\"text\">Start Listening</p>\n          </div>\n        </div>\n\n        <div className=\"col-md-4\">\n          <div className={cn('card action-card', { 'border-secondary': listening })} onClick={stopMic}>\n            <p className={cn('text', { 'text-muted': !listening })}>Stop Listening</p>\n          </div>\n        </div>\n\n        <div className=\"col-md-4\">\n          <div className={cn('card action-card', { 'border-secondary': spokenList.length > 0 })} onClick={reset}>\n            <p className={cn('text', { 'text-muted': spokenList.length === 0 })}>Reset</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-3\">\n          <div className=\"dropdown\">\n            <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n              {`Language: ${language.language}`}\n            </button>\n            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n              {config.languages.map(l => {\n                return (\n                  <div key={l.language} className=\"dropdown-item\" onClick={() => {\n                    stopMic();\n                    reset();\n                    setLanguage(l);\n                  }}>{l.language}</div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-6\">\n          <div className=\"card current-card text-white bg-info\">\n            <div className=\"card-header\">\n              {listening ? `What's being heard` : 'Not listening'}\n            </div>\n\n            <div className=\"card-body\">\n              <p className=\"text current\">{interimTranscript}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-3\">\n          <div className=\"row theme-row\">\n            <div className=\"icono-sun theme\" onClick={() => changeTheme('lux')} />\n            <div className=\"icono-moon theme\" onClick={() => changeTheme('darkly')} />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <div className=\"card commands-card\">\n            <table className=\"table table-hover\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Description</th>\n                  <th scope=\"col\">Command</th>\n                </tr>\n              </thead>\n              <tbody>\n                {getCommandsList()}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div className=\"col-md-6\">\n          <div className=\"spoken-list\">\n            {getSpokenList()}\n          </div>\n        </div>\n      </div>\n\n      <Modal visible={modalVisible} onClickBackdrop={() => setModalVisible(false)}>\n        <div className=\"modal-header\">\n          <h5 className=\"modal-title\">{modalTitle}</h5>\n        </div>\n        <div className=\"modal-body\">\n          <pre>{modalText}</pre>\n        </div>\n      </Modal>\n    </div>\n  )\n}\n\nexport default App;\n","/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/serviceWorker.js",[],"/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/config.js",[],"/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/storage.js",[],"/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/scripts/commands.js",["70"],"import superagent from 'superagent';\nimport { config } from '../config';\nimport * as mappings from './mappings';\n\nexport default function (addToList, language, endFunction) {\n  const url = `http://localhost:${config.express.port}/copyPasta`;\n\n  const getCallback = function (text, nameOfCommandExecuted) {\n    addToList(nameOfCommandExecuted);\n\n    superagent\n      .post(url)\n      .send({ text })\n      .end(endFunction);\n  }\n  // Arabic\n   if (language.locale === 'ar-SA') {\n    return [\n      {\n        command: '(*)دالة',\n        callback: (name) => getCallback(mappings.func(name?.trim() || 'bubblegum'), 'دالة'),\n        commandText: mappings.func('bubblegum'),\n         description: 'انشاء دالة جديدة'\n       }\n     ]\n  }\n  // Spanish\n  if (language.locale === 'es-US') {\n    return [\n      {\n        command: 'función (*)',\n        callback: (name) => getCallback(mappings.func(name?.trim() || 'bubblegum'), 'función'),\n        commandText: mappings.func('bubblegum'),\n        description: 'función'\n      },\n      {\n        command: 'componente (*)',\n        callback: (name) => getCallback(mappings.component(name?.trim() || 'Ooo'), 'componente'),\n        commandText: mappings.func('Ooo'),\n        description: 'componente'\n      }\n    ]\n  }\n\n  // Japanese\n  if (language.locale === 'ja-JP') {\n    return [\n      {\n        command: '関数 (*)',\n        callback: (name) => getCallback(mappings.func(name?.trim() || 'bubblegum'), 'kansuu'),\n        commandText: mappings.func('bubblegum'),\n        description: 'kansuu'\n      },\n      {\n        command: '成分 (*)',\n        callback: (name) => getCallback(mappings.component(name?.trim() || 'Ooo'), 'seibun'),\n        commandText: mappings.func('Ooo'),\n        description: 'seibun'\n      }\n    ]\n  }\n\n  // Chinese\n  if (language.locale === 'zh-CN') {\n    return [\n      {\n        command: '你',\n        callback: () => getCallback('Ni', 'Ni'),\n        commandText: '你',\n        description: 'Ni',\n        isFuzzyMatch: true\n      },\n      {\n        command: '你好',\n        callback: () => getCallback('Hello', 'Hello'),\n        commandText: '你好',\n        description: 'Hello',\n        isFuzzyMatch: true\n      }\n    ]\n  }\n\n  //I love  English\n  if (language.locale === 'en-US') {\n    return [ \n      {\n        command: 'undo',\n        callback: (name) => getCallback(mappings.undo()),\n        commandText: mappings.undo(),\n        description: \"undo wtvr shit U did\"\n      },\n      {\n        command: 'redo',\n        callback: (name) => getCallback(mappings.redo()),\n        commandText: mappings.redo(),\n        description: \"redo wtvr shit U did\"\n      },\n      {\n        command: 'shift right',\n        callback: (name) => getCallback(mappings.shiftRight()),\n        commandText: mappings.shiftRight(),\n        description: \"small shift to the right\"\n      },\n      {\n        command: 'shift left',\n        callback: (name) => getCallback(mappings.shiftLeft()),\n        commandText: mappings.shiftLeft(),\n        description: \"small shift to the right\"\n      },\n      {\n        command: 'enter',\n        callback: (name) => getCallback(mappings.enter(),'enter'),\n        commandText: mappings.enter(),\n        description: \"go to next shitty line\"        \n      },\n      {\n        command: 'select right',\n        callback: (name) => getCallback(mappings.stepRight()),\n        commandText: mappings.stepRight(),\n        description: \"shade right\"        \n      },\n      {\n        command: 'select down',\n        callback: (name) => getCallback(mappings.stepDown()),\n        commandText: mappings.stepDown(),\n        description: \"shade down\"        \n      },{\n        command: 'select up',\n        callback: (name) => getCallback(mappings.stepUp()),\n        commandText: mappings.stepUp(),\n        description: \"shade up\"        \n      },{\n        command: 'select left',\n        callback: (name) => getCallback(mappings.stepRight()),\n        commandText: mappings.stepRight(),\n        description: \"shade left\"        \n      },\n      {\n        command: 'backspace',\n        callback: (name) => getCallback(mappings.backspace()),\n        commandText: mappings.backspace(),\n        description: \"delete shit\"        \n      },\n      {\n        command: 'switch file',\n        callback: (name) => getCallback(mappings.switchFile()),\n        commandText: mappings.switchFile(),\n        description: \"switch current file\"\n      },\n      {\n        command: 'switch application',\n        callback: (name) => getCallback(mappings.switchApp()),\n        commandText: mappings.switchApp(),\n        description: \"switch currently working app\"\n      },\n      {\n        command: 'tab',\n        callback: (name) => getCallback(mappings.tab()),\n        commandText: mappings.tab(),\n        description: \"tab\"        \n      },\n      {\n        command: 'save',\n        callback: (name) => getCallback(mappings.save()),\n        commandText: mappings.save(),\n        description: \"saves your shitty shit\"        \n      },\n      {\n        command: 'saving',\n        callback: (name) => getCallback(mappings.saveas()),\n        commandText: mappings.saveas(),\n        description: \"saves your shitty shit with name\"        \n      },\n      {\n        command: 'right',\n        callback: (name) => getCallback(mappings.right()),\n        commandText: mappings.right(),\n        description: \"go right\"\n      },\n      {\n        command: 'left',\n        callback: (name) => getCallback(mappings.left()),\n        commandText: mappings.left(),\n        description: \"go left\"\n      },\n      {\n        command: 'down',\n        callback: (name) => getCallback(mappings.down()),\n        commandText: mappings.down(),\n        description: \"go down\"\n      },\n      {\n        command: 'up',\n        callback: (name) => getCallback(mappings.up()),\n        commandText: mappings.up(),\n        description: \"go up\"\n      },\n      {\n        command: 'spell (*)',\n        callback: (name) => getCallback(mappings.spell(name?.trim() || 'bubblegum'), 'spell'),\n        commandText: mappings.spell('bubblegum'),\n        description: 'wtvr shit U wanna say'\n      },\n      {\n        command: 'head',\n        callback: () => getCallback(mappings.head()),\n        commandText: mappings.html(),\n        description: 'create head tag'\n      },\n      {\n        command: 'main tag',\n        callback: () => getCallback(mappings.html()),\n        commandText: mappings.html(),\n        description: 'create HTML tag'\n      },\n      {\n        command: 'function (*)',\n        callback: (name) => getCallback(mappings.func(name?.trim() || 'bubblegum'), 'function'),\n        commandText: mappings.func('bubblegum'),\n        description: 'new function'\n      },\n      {\n        command: 'constant (*)',\n        callback: (name) => getCallback(mappings.constant(name?.trim() || 'marceline'), 'constant'),\n        commandText: mappings.constant('marceline'),\n        description: 'const'\n      },\n      {\n        command: 'state (*)',\n        callback: (name) => getCallback(mappings.state(name?.trim() || 'state'), 'state'),\n        commandText: mappings.state('state'),\n        description: 'useState'\n      },\n      {\n        command: 'component (*)',\n        callback: (name) => getCallback(mappings.component(name?.trim() || 'Ooo'), 'component'),\n        commandText: mappings.component('Ooo'),\n        description: 'functional component'\n      },\n      {\n        command: 'effect (*)',\n        callback: (name) => getCallback(mappings.effect(name?.trim() || ''), 'effect'),\n        commandText: mappings.effect(''),\n        description: 'useEffect',\n        isFuzzyMatch: true\n      },\n      // need to spell out 'd', 'i', 'v' for speech recognition to pick up\n      {\n        command: 'div (*)',\n        callback: (text) => getCallback(mappings.div(text?.trim() || 'the vampire queen'), 'div'),\n        commandText: mappings.div('the vampire queen'),\n        description: '<div>'\n      },\n      {\n        command: 'span (*)',\n        callback: (text) => getCallback(mappings.span(text?.trim() || 'candy kingdom'), 'span'),\n        commandText: mappings.span('candy kingdom'),\n        description: '<span>'\n      },\n      {\n        command: 'spam (*)',\n        callback: (text) => getCallback(mappings.span(text?.trim() || 'candy kingdom'), 'span'),\n      },\n      {\n        command: 'text (*)',\n        callback: (type) => getCallback(mappings.text(type?.trim() || ''), 'text'),\n        commandText: mappings.text(''),\n        description: '<p>'\n      },\n      {\n        command: 'button (*)',\n        callback: (type) => getCallback(mappings.button(type?.trim() || ''), 'button'),\n        commandText: mappings.button(''),\n        description: '<button>'\n      },\n      {\n        command: 'input',\n        callback: (type) => getCallback(mappings.input(), 'input'),\n        commandText: mappings.input(),\n        description: '<input>'\n      },\n      {\n        command: 'toggle',\n        callback: (type) => getCallback(mappings.toggle(), 'toggle'),\n        commandText: mappings.toggle(),\n        description: 'toggle'\n      },\n      {\n        command: 'checkbox',\n        callback: (type) => getCallback(mappings.checkbox(), 'checkbox'),\n        commandText: mappings.checkbox(),\n        description: 'checkbox'\n      },\n      {\n        command: 'check',\n        callback: (type) => getCallback(mappings.checkbox(), 'check')\n      },\n      {\n        command: 'slider',\n        callback: (type) => getCallback(mappings.slider(), 'slider'),\n        commandText: mappings.slider(),\n        description: 'slider'\n      },\n      {\n        command: 'quote',\n        callback: () => getCallback(mappings.blockquote(), 'quote'),\n        commandText: mappings.blockquote(),\n        description: '<blockquote>'\n      },\n      {\n        command: 'quotes',\n        callback: () => getCallback(mappings.blockquote(), 'quote')\n      },\n      {\n        command: 'block quote',\n        callback: () => getCallback(mappings.blockquote(), 'blockquote')\n      },\n      {\n        command: 'table',\n        callback: () => getCallback(mappings.table(), 'table'),\n        commandText: mappings.table(),\n        description: '<table>'\n      },\n      {\n        command: 'email',\n        callback: () => getCallback(mappings.email(), 'email'),\n        commandText: mappings.email(),\n        description: 'email input'\n      },\n      {\n        command: 'password',\n        callback: () => getCallback(mappings.password(), 'password'),\n        commandText: mappings.password(),\n        description: 'password input'\n      },\n      {\n        command: 'select',\n        callback: () => getCallback(mappings.select(), 'select'),\n        commandText: mappings.select(),\n        description: '<select>'\n      },\n      {\n        command: 'textarea',\n        callback: () => getCallback(mappings.textarea(), 'textarea'),\n        commandText: mappings.textarea(),\n        description: '<textarea>'\n      },\n      {\n        command: 'text area',\n        callback: () => getCallback(mappings.textarea(), 'textarea')\n      },\n      {\n        command: 'file',\n        callback: () => getCallback(mappings.file(), 'file'),\n        commandText: mappings.file(),\n        description: 'file upload'\n      },\n      {\n        command: 'radio',\n        callback: () => getCallback(mappings.radio(), 'radio'),\n        commandText: mappings.radio(),\n        description: 'radio'\n      },\n      {\n        command: 'alert (*)',\n        callback: (type) => getCallback(mappings.alert(type?.trim() || 'success'), 'alert'),\n        commandText: mappings.alert('success'),\n        description: 'alert'\n      },\n      {\n        command: 'card',\n        callback: () => getCallback(mappings.card(), 'card'),\n        commandText: mappings.card(),\n        description: 'card'\n      },\n      {\n        command: 'modal',\n        callback: () => getCallback(mappings.modal(), 'modal'),\n        commandText: mappings.modal(),\n        description: 'modal'\n      },\n      {\n        command: 'toast',\n        callback: () => getCallback(mappings.toast(), 'toast'),\n        commandText: mappings.toast(),\n        description: 'toast'\n      }\n    ]\n  }\n}\n","/media/hitham/14843559-82b8-4397-9840-ff0bb00cfba7/Downloads/react-voice-main/src/scripts/mappings.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":38,"column":6,"nodeType":"77","endLine":38,"endColumn":8,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":5,"column":1,"nodeType":"81","endLine":278,"endColumn":2},{"ruleId":"71","replacedBy":"82"},{"ruleId":"73","replacedBy":"83"},{"ruleId":"75","severity":1,"message":"76","line":38,"column":6,"nodeType":"77","endLine":38,"endColumn":8,"suggestions":"84"},{"ruleId":"79","severity":1,"message":"80","line":5,"column":1,"nodeType":"81","endLine":390,"endColumn":2},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'language.locale'. Either include it or remove the dependency array.","ArrayExpression",["87"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["85"],["86"],["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"89","fix":"91"},"Update the dependencies array to be: [language.locale]",{"range":"92","text":"93"},{"range":"94","text":"93"},[1192,1194],"[language.locale]",[1192,1194]]